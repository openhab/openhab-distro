#!/bin/sh

# taken from postinst script

getVersionNumber(){
    firstPart="$(echo "$1" | awk -F'.' '{print $1}')"
    secondPart="$(echo "$1" | awk -F'.' '{print $2}')"
    thirdPart="$(echo "$1" | awk -F'.' '{print $3}')"
    thirdPart="${thirdPart%%-*}"
    echo $((firstPart*10000+secondPart*100+thirdPart))
}

runCommand() {
    string="$1"

    string="$(echo "$string" | sed "s:\$OPENHAB_USERDATA:${OPENHAB_USERDATA:?}:g")"
    string="$(echo "$string" | sed "s:\$OPENHAB_CONF:${OPENHAB_CONF:?}:g")"
    string="$(echo "$string" | sed "s:\$OPENHAB_HOME:${OPENHAB_HOME:?}:g")"

    command="$(echo "$string" | awk -F';' '{print $1}')"
    param1="$(echo "$string" | awk -F';' '{print $2}')"
    param2="$(echo "$string" | awk -F';' '{print $3}')"
    param3="$(echo "$string" | awk -F';' '{print $4}')"

    case $command in
      'DELETE')
      if [ -f "$param1" ]; then
        echo "  Deleting File: $param1"
        rm -f "$param1"
      fi
    ;;
    'DELETEDIR')
      if [ -d "$param1" ]; then
        echo "  Deleting Directory: $param1"
        rm -rf "$param1"
      fi
    ;;
    'MOVE')
      if [ -f "$param1" ]; then
        echo "  Moving:   From $param1 to $param2"
        mv "$param1" "$param2"
      fi
    ;;
    'REPLACE')
      # Avoid error if file does not exist
      if [ -f "$param3" ]; then
        echo "  Replacing: String $param1 to $param2 in file $param3"
        sed -i "s:$param1:$param2:g" "$param3"
      fi
    ;;
    'NOTE')  printf '  \033[32mNote:\033[m     %s\n' "$param1";;
    'ALERT') printf '  \033[31mWarning:\033[m  %s\n' "$param1";;
    esac
}

migrate_files() {
  if [ "$(echo "$BackupVersion" | cut -d'.' -f1)" = "2" ] && [ "${ohPkgName}" = "openhab" ]; then
    # migrate config to OH3 (namespace change)
    # copy of code taken from postinst script
    Section="POST"
    VersionMessage="Migrating OH2 config to OH3"
    InSection=false
    InNewVersion=false
    oldVersionNumber=$(getVersionNumber "$oldVersion")
    if [ -r "${OPENHAB_RUNTIME}/update.lst" ]; then
      ## Read the file line by line.
      while IFS= read -r Line; do
        case $Line in
        '')
          continue
        ;;
        ## Flag to run the relevant [[section]] only.
        "[[$Section]]")
          InSection=true
        ;;
        ## Stop reading the file if another [[section]] starts.
        "[["*"]]")
          if $InSection; then
            break
          fi
        ;;
        ## Detect the [version] and execute the line if relevant.
        '['3'.'*'.'*']')
          if $InSection; then
            LineVersion="$(echo "$Line" | awk -F'[][]' '{print $2}')"
            LineVersionNumber=$(getVersionNumber "$LineVersion")
            if [ "$oldVersionNumber" -lt "$LineVersionNumber" ]; then
              InNewVersion=true
              echo ""
              printf "$VersionMessage $LineVersion:\n"
            else
              InNewVersion=false
            fi
          fi
        ;;
        *)
          if $InSection && $InNewVersion; then
            runCommand "$Line"
          fi
        ;;
        esac    
      done < "${OPENHAB_RUNTIME}/update.lst"
    fi
  fi
}

setup(){
  if [ -z "$1" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: restore filename"
    echo ""
    echo "  e.g. ./restore myBackup.zip  << Restores config from myBackup.zip"
    echo ""
    echo "Use this script to restore an openHAB configuration that was previously made with"
    echo "the openHAB 'backup' script."
    echo ""
    exit 0
  fi

  # change file locations to read defaults from based on installed version
  # according to dpkg only either "openhab" or "openhab2" packages are installed
  ohPkgName=openhab2
  if [ "$(dpkg -s 'openhab' 2> /dev/null | grep Status | cut -d' ' -f2)" = "install" ]; then
    ohPkgName=openhab
  fi

  ## Ask to run as root to prevent us from running sudo in this script.
  if [ "$(id -u)" -ne 0 ]; then
    echo "Please run this script as root! (e.g. use sudo)" >&2
    exit 1
  fi

  command -v unzip >/dev/null 2>&1 || {
    echo "'unzip' program was not found, please install it first." >&2
    exit 1
  }

  ## Check to see if processes are running before restoring
  if [ ! -z "$(pgrep -f "${ohPkgName}.*java")" ]; then
    echo "openHAB is running! Please stop the process before restoring." >&2
    exit 1
  fi

  WorkingDir="$(cd "$(dirname "$0")" && cd ../.. && pwd -P)"

  ## Set path variables
  if [ -r /etc/profile.d/${ohPkgName}.sh ]; then
    . /etc/profile.d/${ohPkgName}.sh
  elif [ -r /etc/default/${ohPkgName} ]; then
    . /etc/default/${ohPkgName}
  fi
  if [ -z "$OPENHAB_CONF" ];       then OPENHAB_CONF="$WorkingDir/conf"; fi
  if [ -z "$OPENHAB_USERDATA" ];   then OPENHAB_USERDATA="$WorkingDir/userdata"; fi

  echo "Using '$OPENHAB_CONF' as conf folder..."
  echo "Using '$OPENHAB_USERDATA' as userdata folder..."

  ## Check two of the standard openHAB folders to make sure we're updating the right thing.
  if [ ! -d "$OPENHAB_USERDATA" ] || [ ! -d "$OPENHAB_CONF" ]; then
    echo "Configuration paths are invalid..." >&2
    echo "Try setting OPENHAB_USERDATA and OPENHAB_CONF environment variables." >&2
    exit 1
  fi

  currentUser=$(ls -ld "$OPENHAB_USERDATA" | awk '{print $3}')
  currentGroup=$(ls -ld "$OPENHAB_USERDATA" | awk '{print $4}')

  CurrentVersion="$(awk '/openhab-distro/{print $3}' "$OPENHAB_USERDATA/etc/version.properties")"

  ## Store anything in temporary folders
  TempDir="/tmp/${ohPkgName}/restore"
  ## Clear older stuff if it exists
  rm -rf "${TempDir:?}"
  echo "Making Temporary Directory"
  mkdir -p "$TempDir" || {
    echo "Failed to make temporary directory: $TempDir" >&2
    exit 1
  }
}

echo "                                           "
echo "###########################################"
echo "       openHAB config restore script       "
echo "###########################################"
echo "                                           "

InputFile="$1"

setup "$InputFile"

## Extract zip file
echo "Extracting zip file to temporary folder."

unzip -oq "$InputFile" -d "$TempDir" || {
  echo "Unable to unzip $InputFile, Aborting..." >&2
  exit 1
}

## Check for backup properties list.
if [ ! -f "$TempDir/backup.properties" ]; then
  echo "Backup was not created by openHAB scripts, please resort to a manual restore..." >&2
  exit 1
fi

## Grab information with backup.properties
str="$(awk '/version=/{print $1}' "$TempDir/backup.properties")"
BackupVersion=${str#*=}
str="$(awk '/timestamp=/{print $1}' "$TempDir/backup.properties")"
BackupTime=${str#*=}
str="$(awk '/user=/{print $1}' "$TempDir/backup.properties")"
OHUser=${str#*=}
str="$(awk '/group=/{print $1}' "$TempDir/backup.properties")"
OHGroup=${str#*=}

## Feeback to user
echo ""
echo " Backup Information:"
echo " -------------------"
echo " Backup Version         | $BackupVersion (You are on $CurrentVersion)"
echo " Backup Timestamp       | $BackupTime"
echo " Config belongs to user | $OHUser"
echo "             from group | $OHGroup"
echo ""
echo "Your current configuration will become owned by $currentUser:$currentGroup."
echo ""
echo "Any existing files with the same name will be replaced."
echo "Any file without a replacement will be deleted."
echo ""
printf "Okay to Continue? [y/N]: "
read -r answer
case "$answer" in
  [Yy]*)
    ;;
  *)
    echo "Cancelling restore..."
    rm -rf /tmp/${ohPkgName}
    exit 0
    ;;
esac

## Move old configuration
rm -rf /tmp/${ohPkgName}/old
mkdir -p /tmp/${ohPkgName}/old
echo "Moving system files in userdata to temporary folder"
if [ -d "$OPENHAB_USERDATA/backups" ]; then
  mv "$OPENHAB_USERDATA/backups" /tmp/${ohPkgName}/old || {
    echo "Could not move backup folder to temporary folder..." >&2
    exit 1
  }
fi
if [ -d "${OPENHAB_USERDATA:?}/etc" ]; then
  mv "${OPENHAB_USERDATA:?}/etc" /tmp/${ohPkgName}/old || {
    echo "Could not move etc folder to temporary folder" >&2
    exit 1
  }
fi

echo "Deleting old userdata folder..."
rm -rf "${OPENHAB_USERDATA:?}/"*

echo "Restoring system files in userdata..."
if [ -d /tmp/${ohPkgName}/old/backups ]; then
  mv /tmp/${ohPkgName}/old/backups "${OPENHAB_USERDATA:?}/" || {
    echo "Unable to move other backup files back..."
    exit 1
  }
fi
if [ -d /tmp/${ohPkgName}/old/etc ]; then
  mv /tmp/${ohPkgName}/old/etc "${OPENHAB_USERDATA:?}/" || {
    echo "Unable to move system files back..."
    exit 1
  }
fi

echo "Deleting old conf folder..."
rm -rf "${OPENHAB_CONF:?}/"*

## Restore configuration
echo "Restoring openHAB with backup configuration..."
command cp -af "$TempDir/conf/"*     "${OPENHAB_CONF:?}/" || {
  echo "Failed to copy $TempDir/conf/ to $OPENHAB_CONF/..." >&2
  echo "Please check $TempDir and replace conf and userdata." >&2
  exit 1
}
command cp -af "$TempDir/userdata/"* "${OPENHAB_USERDATA:?}/" || {
  echo "Failed to copy $TempDir/userdata/ to $OPENHAB_USERDATA/..." >&2
  echo "Please check $TempDir and replace userdata." >&2
  exit 1
}

## Reset ownership
chown -R "$currentUser:$currentGroup" "$OPENHAB_USERDATA" || {
  echo "WARNING: Failed to change userdata folder permissions to $currentUser:$currentGroup" >&2
}
chown -R "$currentUser:$currentGroup" "$OPENHAB_CONF" || {
  echo "WARNING: Failed to change conf folder permissions to $currentUser:$currentGroup" >&2
}

## Migrate OH2 to OH3
migrate_files

## Cleanup
echo "Deleting temporary files..."
rm -rf /tmp/${ohPkgName}
echo "Backup successfully restored!"
echo ""
